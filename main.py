import asyncio
import logging
import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.client.bot import DefaultBotProperties
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

API_TOKEN = '8446416030:AAH4fFbpC644n4I9-mT4PofWEpTIbiuAxJg'
ADMIN_CHAT_ID = '-1002929602692'

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

BTN_SERVICES = '‚ú® –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã'
BTN_CALC = 'üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å'
BTN_LEAD = 'üìû –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'
BTN_ABOUT = '‚ùì –û –Ω–∞—Å'
BTN_BACK = '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'
BTN_MENU = '‚¨ÖÔ∏è –í –º–µ–Ω—é'
BTN_CANCEL = '‚úñ –û—Ç–º–µ–Ω–∞'
BTN_CONTACT = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç'

SERVICES_TEXT = (
    "–ù–∞—à–∏ —É—Å–ª—É–≥–∏ –∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ü–µ–Ω—ã:\n\n"
    "üå± <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è —É–±–æ—Ä–∫–∞</b> ‚Äî –æ—Ç 2‚ÄØ500 ‚ÇΩ\n"
    "‚ú® <b>–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞</b> ‚Äî –æ—Ç 6‚ÄØ000 ‚ÇΩ\n"
    "üõ†Ô∏è <b>–£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞</b> ‚Äî –æ—Ç 9‚ÄØ000 ‚ÇΩ\n\n"
    "–¢–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–ª–æ—â–∞–¥–∏ ‚Äî –º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä—è–º–æ –∑–¥–µ—Å—å."
)

ABOUT_TEXT = (
    "¬´–ß–∏—Å—Ç—ã–π –£–≥–æ–ª¬ª ‚Äî —Å–µ—Ä–≤–∏—Å —ç–∫–æ‚Äë—É–±–æ—Ä–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä –∏ –æ—Ñ–∏—Å–æ–≤.\n\n"
    "‚úÖ –≠–∫–æ‚Äë—Å—Ä–µ–¥—Å—Ç–≤–∞: –±–µ–∑–æ–ø–∞—Å–Ω—ã –¥–ª—è –¥–µ—Ç–µ–π –∏ –ø–∏—Ç–æ–º—Ü–µ–≤.\n"
    "‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–ª–∏–Ω–µ—Ä—ã: –æ–±—É—á–µ–Ω–∏–µ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞.\n"
    "‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è: –Ω–µ–¥–æ—á—ë—Ç—ã —É—Å—Ç—Ä–∞–Ω–∏–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ."
)

def kb_main() -> types.ReplyKeyboardMarkup:
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text=BTN_SERVICES), types.KeyboardButton(text=BTN_CALC)],
            [types.KeyboardButton(text=BTN_LEAD), types.KeyboardButton(text=BTN_ABOUT)]
        ],
        resize_keyboard=True
    )

def kb_type() -> types.ReplyKeyboardMarkup:
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text='–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è'),
             types.KeyboardButton(text='–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è'),
             types.KeyboardButton(text='–ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞')],
            [types.KeyboardButton(text=BTN_MENU), types.KeyboardButton(text=BTN_CANCEL)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def kb_area() -> types.ReplyKeyboardMarkup:
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=BTN_BACK), types.KeyboardButton(text=BTN_CANCEL)]],
        resize_keyboard=True
    )

def kb_phone() -> types.ReplyKeyboardMarkup:
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text=BTN_CONTACT, request_contact=True)],
            [types.KeyboardButton(text=BTN_BACK), types.KeyboardButton(text=BTN_CANCEL)]
        ],
        resize_keyboard=True
    )

class Calc(StatesGroup):
    type = State()
    area = State()
    phone = State()

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    text = (
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!\n\n"
        "–Ø ‚Äî –±–æ—Ç‚Äë–ø–æ–º–æ—â–Ω–∏–∫ —Å–µ—Ä–≤–∏—Å–∞ —ç–∫–æ‚Äë—É–±–æ—Ä–∫–∏ ¬´–ß–∏—Å—Ç—ã–π –£–≥–æ–ª¬ª.\n\n"
        "üåø –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏–ø–æ–∞–ª–ª–µ—Ä–≥–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.\n"
        "üßπ –ù–∞–≤–æ–¥–∏–º —á–∏—Å—Ç–æ—Ç—É, –ø–æ–∫–∞ –≤—ã –æ—Ç–¥—ã—Ö–∞–µ—Ç–µ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ."
    )
    await message.answer(text, reply_markup=kb_main())

@dp.message(F.text == BTN_SERVICES)
async def services(message: types.Message):
    await message.answer(SERVICES_TEXT, reply_markup=kb_main())

@dp.message(F.text == BTN_ABOUT)
async def about(message: types.Message):
    await message.answer(ABOUT_TEXT, reply_markup=kb_main())

@dp.message(F.text == BTN_LEAD)
async def quick_lead(message: types.Message):
    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text=BTN_CONTACT, request_contact=True)],
            [types.KeyboardButton(text=BTN_MENU)]
        ],
        resize_keyboard=True
    )
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=kb)

@dp.message(F.contact)
async def handle_contact(message: types.Message):
    phone = message.contact.phone_number
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, –≤–∞—à –Ω–æ–º–µ—Ä {phone} –ø–æ–ª—É—á–µ–Ω ‚Äî —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è!", reply_markup=kb_main())
    user = message.from_user
    await bot.send_message(
        ADMIN_CHAT_ID,
        f"‚ÄºÔ∏è –ë—ã—Å—Ç—Ä–∞—è –∑–∞—è–≤–∫–∞\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} @{user.username or '‚Äî'} (id {user.id})"
    )

@dp.message(F.text == BTN_MENU)
async def back_to_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb_main())

@dp.message(F.text == BTN_CANCEL)
async def cancel_flow(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=kb_main())

@dp.message(F.text == BTN_CALC)
async def start_calc(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(Calc.type)
    await message.answer("–ö–∞–∫–æ–π —Ç–∏–ø —É–±–æ—Ä–∫–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=kb_type())

@dp.message(StateFilter(Calc.type), F.text.in_({'–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è', '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è', '–ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞'}))
async def set_type(message: types.Message, state: FSMContext):
    await state.update_data(order_type=message.text)
    await state.set_state(Calc.area)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –≤ –º¬≤ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 1000).", reply_markup=kb_area())

@dp.message(StateFilter(Calc.type), F.text == BTN_MENU)
async def type_to_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb_main())

@dp.message(StateFilter(Calc.type))
async def type_fallback(message: types.Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è / –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è / –ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞.",
        reply_markup=kb_type()
    )

@dp.message(StateFilter(Calc.area), F.text == BTN_BACK)
async def area_back(message: types.Message, state: FSMContext):
    await state.set_state(Calc.type)
    await message.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —É–±–æ—Ä–∫–∏.", reply_markup=kb_type())

@dp.message(StateFilter(Calc.area))
async def set_area(message: types.Message, state: FSMContext):
    text = message.text.strip().replace(',', '.')
    if not re.fullmatch(r'(?:\d{2,4})(?:\.\d)?', text):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 1000 (–±–µ–∑ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è).", reply_markup=kb_area())
        return
    await state.update_data(area=text)
    await state.set_state(Calc.phone)
    await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç¬ª.", reply_markup=kb_phone())

@dp.message(StateFilter(Calc.phone), F.text == BTN_BACK)
async def phone_back(message: types.Message, state: FSMContext):
    await state.set_state(Calc.area)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –≤ –º¬≤.", reply_markup=kb_area())

def normalize_phone(p: str) -> str | None:
    digits = re.sub(r'\D+', '', p)
    if 10 <= len(digits) <= 15:
        if digits.startswith('8') and len(digits) == 11:
            digits = '7' + digits[1:]
        if not digits.startswith('+'):
            digits = '+' + digits
        return digits
    return None

@dp.message(StateFilter(Calc.phone), F.contact)
async def phone_contact(message: types.Message, state: FSMContext):
    phone = normalize_phone(message.contact.phone_number) or message.contact.phone_number
    await finalize_order(message, state, phone)

@dp.message(StateFilter(Calc.phone))
async def phone_text(message: types.Message, state: FSMContext):
    phone = normalize_phone(message.text.strip())
    if not phone:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
            reply_markup=kb_phone()
        )
        return
    await finalize_order(message, state, phone)

async def finalize_order(message: types.Message, state: FSMContext, phone: str):
    data = await state.get_data()
    order_type = data.get('order_type', '‚Äî')
    area = data.get('area', '‚Äî')
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n\n"
        f"–¢–∏–ø: {order_type}\n–ü–ª–æ—â–∞–¥—å: {area} –º¬≤\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
        f"–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
        reply_markup=kb_main()
    )
    user = message.from_user
    await bot.send_message(
        ADMIN_CHAT_ID,
        f"‚ÄºÔ∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n–¢–∏–ø: {order_type}\n–ü–ª–æ—â–∞–¥—å: {area} –º¬≤\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} @{user.username or '‚Äî'} (id {user.id})"
    )
    await state.clear()

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
